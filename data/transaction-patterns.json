[
  {
    "description": "PIE Ayuntamiento",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /Pie Ayunt/i.test(concepto);\n      \n      // - Specific banks or accounts\n      const isBBVA = caja.includes('207');\n      \n      // Combine conditions as needed \n      return conceptMatch && isBBVA;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const cajaReal = caja.split('_')[0];\n      function getMes(fechaDDMMYYYY) {\n       const meses = ['ENERO', 'FEBRERO', 'MARZO', 'ABRIL', 'MAYO', 'JUNIO', 'JULIO', 'AGOSTO',       'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE'];\n       console.log(\"getMes\", fecha);\n       // Parse ddmmYYYY format\n       const day = fechaDDMMYYYY.substring(0, 2);\n       const month = fechaDDMMYYYY.substring(2, 4);\n       const year = fechaDDMMYYYY.substring(4, 8);\n  \n       // JavaScript months are 0-indexed, so subtract 1 from the parsed month\n       const monthIndex = parseInt(month, 10) - 1;\n  \n       return meses[monthIndex]+'/'+year;\n};\n\t   \n      // Calculate sub-amounts based on rules\n      const importe1 = Math.round(importe * 0.96 * 100) / 100;\n      const importe2 = Math.round(importe * 0.034 * 100) / 100;\n      const importe3 = Math.round(importe * 0.006 * 100) / 100;\n      \n      return {\n        num_operaciones: 3,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"42000\", IMPORTE_PARTIDA: importe1 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `PARTICIPACION TRIBUTOS DEL ESTADO. ${getMes(fecha)}`, \n                ado: \"\" \n              }]\n            }\n          },\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042J\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"130\", IMPORTE_PARTIDA: importe2 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `COMPENSACION INICIAL IAE CONSOLIDADA. PIE ${getMes(fecha)}`, \n                ado: \"\" \n              }]\n            }\n          },\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042J\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"130\", IMPORTE_PARTIDA: importe3 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `COMPENSACION ADICIONAL IAE CONSOLIDADA. PIE ${getMes(fecha)}`, \n                ado: \"\" \n              }]\n            }\n          }\n        ]\n      };\n    }"
  },
  {
    "description": "Month-end tax payment pattern",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Check if it's a month-end tax payment\n      const fechaObj = new Date(fecha);\n      const isLastDayOfMonth = fechaObj.getDate() > 28;\n      const containsTaxKeyword = /impuesto|tributo|tasa|ibi|iae|ivtm/i.test(concepto);\n      const importeNum = parseFloat(importe);\n      const isTypicalAmount = importe > 1000 && importe < 10000;\n      \n      return isLastDayOfMonth && containsTaxKeyword && isTypicalAmount;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const cajaReal = caja.split('_')[0];\n      const importeNumerico = parseFloat(importe);\n      \n      // Simple tax payment entry\n      return {\n        num_operaciones: 1,\n        liquido_operaciones: importeNumerico,\n        operaciones: [\n          {\n            tipo: \"ado220\",\n            detalle: {\n              fecha: fecha,\n              expediente: \"TRIB-\" + fechaFormateada,\n              tercero: \"P9100012E\",\n              fpago: \"10\",\n              tpago: \"10\",\n              caja: cajaReal,\n              texto: \"PAGO IMPUESTO: \" + concepto.substring(0, 30),\n              aplicaciones: [{\n                funcional: \"920\", \n                economica: \"225\",\n                gfa: null, \n                importe: importe,\n                cuenta: \"6310\"\n              }]\n            }\n          }\n        ]\n      };\n    }"
  },
  {
    "description": "Copy of PIE Ayuntamiento payment pattern",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /Pie Ayunt. Sist. General.*Corporaciones Locales Por P.I.E./i.test(concepto);\n      \n      // Additional conditions could include:\n      // - Date range check\n      const fechaObj = new Date(fecha);\n      const isEndOfMonth = fechaObj.getDate() >= 25; // Example: transactions typically at end of month\n      \n      // - Specific banks or accounts\n      const isBBVA = caja.includes('BBVA');\n      \n      // - Amount ranges\n      //const importeNum = parseFloat(importe.replace(',', '.'));\n      const isLargeAmount = importe > 50000; // Example threshold\n      \n      // Combine conditions as needed \n      return conceptMatch && isEndOfMonth && isBBVA;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const cajaReal = caja.split('_')[0];\n      const fechaFormateada = fecha;\n      \n      \n      // Calculate sub-amounts based on rules\n      const importe1 = Math.round(importe * 0.96 * 100) / 100;\n      const importe2 = Math.round(importe * 0.034 * 100) / 100;\n      const importe3 = Math.round(importe * 0.006 * 100) / 100;\n      \n      return {\n        num_operaciones: 4,\n        liquido_operaciones: importeNumerico,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"42000\", IMPORTE_PARTIDA: importe1 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `PARTICIPACION TRIBUTOS DEL ESTADO. ${obtenerMes(fecha)}/2024`, \n                ado: \"\" \n              }]\n            }\n          },\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042J\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"130\", IMPORTE_PARTIDA: importe2 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `COMPENSACION INICIAL IAE CONSOLIDADA. PIE ${obtenerMes(fecha)}/2024`, \n                ado: \"\" \n              }]\n            }\n          },\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042J\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"130\", IMPORTE_PARTIDA: importe3 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `COMPENSACION ADICIONAL IAE CONSOLIDADA. PIE ${obtenerMes(fecha)}/2024`, \n                ado: \"\" \n              }]\n            }\n          },\n          // ADO generic entry\n          {\n            tipo: \"ado220\",\n            detalle: {\n              fecha: fecha,\n              expediente: \"rbt-apunte-ADO\",\n              tercero: \"P9100012E\",\n              fpago: \"10\",\n              tpago: \"10\",\n              caja: cajaReal,\n              texto: \"AUTOMATICO \" + concepto.substring(0, 30),\n              aplicaciones: [{\n                funcional: \"162\", \n                economica: \"467\",\n                gfa: null, \n                importe: importe,\n                cuenta: \"6501\"\n              }]\n            }\n          }\n        ]\n      };\n    }"
  },
  {
    "description": "ARQUEO-PLACA-VADO",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // - Amount ranges\n      //const importeNum = parseFloat(importe.replace(',', '.'));\n      const matchAmount = importe == 14;\n      \n      // Combine conditions as needed \n      return matchAmount;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const cajaReal = caja.split('_')[0];\n      \n      \n            \n      return {\n        num_operaciones: 1,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"43000000M\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"399\", IMPORTE_PARTIDA: importe },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `TRANSF N/F ${concepto} (PLACA VADO)`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "ARQUEO-TRAMITE-CATASTRO",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // - Amount ranges\n      //const importeNum = parseFloat(importe.replace(',', '.'));\n      const matchAmount = importe == 7;\n      \n      // Combine conditions as needed \n      return matchAmount;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const cajaReal = caja.split('_')[0];\n        \n            \n      return {\n        num_operaciones: 1,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"43000000M\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"399\", IMPORTE_PARTIDA: importe },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `TRANSF N/F ${concepto} (TRAMITE CATASTRO)`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "ARQUEO-ALQUILER-PISCINA",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // - Amount ranges\n      //const importeNum = parseFloat(importe.replace(',', '.'));\n      const matchAmount = importe == 440;\n      \n      // Combine conditions as needed \n      return matchAmount;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const cajaReal = caja.split('_')[0];\n      \n      \n            \n      return {\n        num_operaciones: 1,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"43000000M\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"399\", IMPORTE_PARTIDA: importe },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `TRANSF N/F ${concepto} (ALQUILER BAR PISCINA)`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  }
]