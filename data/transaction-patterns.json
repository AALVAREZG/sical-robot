[
  {
    "description": "PIE Ayuntamiento",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /PIE AYUNT. SIST. GENERAL/i.test(concepto);\n      \n      \n      // - Specific banks or accounts\n      const isBBVA = caja == '207';\n      \n      // Combine conditions as needed \n      return conceptMatch && isBBVA;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const cajaReal = caja.split('_')[0];\n      const dateISOString = new Date().toISOString();\n      function getMesAnyo(fechaDDMMYYYY) {\n       const meses = ['ENERO', 'FEBRERO', 'MARZO', 'ABRIL', 'MAYO', 'JUNIO', 'JULIO', 'AGOSTO',       'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE'];\n       console.log(\"getMes\", fecha);\n       // Parse ddmmYYYY format\n       const day = fechaDDMMYYYY.substring(0, 2);\n       const month = fechaDDMMYYYY.substring(2, 4);\n       const year = fechaDDMMYYYY.substring(4, 8);\n  \n       // JavaScript months are 0-indexed, so subtract 1 from the parsed month\n       const monthIndex = parseInt(month, 10) - 1;\n  \n       return meses[monthIndex]+'/'+year;\n      };\n      // Calculate sub-amounts based on rules\n      const importe1 = Math.round(importe * 0.96 * 100) / 100;\n      const importe2 = Math.round(importe * 0.034 * 100) / 100;\n      const importe3 = Math.round(importe * 0.006 * 100) / 100;\n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 3,\n\t      creation_date: dateISOString,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042J\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"42000\", IMPORTE_PARTIDA: importe1 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `PARTICIPACION TRIBUTOS DEL ESTADO. ${getMesAnyo(fecha)}`, \n                ado: \"\" \n              }]\n            }\n          },\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042J\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"130\", IMPORTE_PARTIDA: importe2 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `COMPENSACION INICIAL IAE CONSOLIDADA. PIE ${getMesAnyo(fecha)}`, \n                ado: \"\" \n              }]\n            }\n          },\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042J\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"130\", IMPORTE_PARTIDA: importe3 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `COMPENSACION ADICIONAL IAE CONSOLIDADA. PIE ${getMesAnyo(fecha)}`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "Month-end tax payment pattern",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Check if it's a month-end tax payment\n      const fechaObj = new Date(fecha);\n      const isLastDayOfMonth = fechaObj.getDate() > 28;\n      const containsTaxKeyword = /impuesto|tributo|tasa|ibi|iae|ivtm/i.test(concepto);\n      const importeNum = parseFloat(importe);\n      const isTypicalAmount = importe > 1000 && importe < 10000;\n      \n      return isLastDayOfMonth && containsTaxKeyword && isTypicalAmount;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const cajaReal = caja.split('_')[0];\n      const importeNumerico = parseFloat(importe);\n      \n      // Simple tax payment entry\n      return {\n\tid_task: caja+'_'+fecha+'_'+String(importe)+'_'+ concepto.replace(/\\s/g, \"\").slice(-5),\n        num_operaciones: 1,\n        liquido_operaciones: importeNumerico,\n        operaciones: [\n          {\n            tipo: \"ado220\",\n            detalle: {\n              fecha: fecha,\n              expediente: \"TRIB-\" + fechaFormateada,\n              tercero: \"P9100012E\",\n              fpago: \"10\",\n              tpago: \"10\",\n              caja: cajaReal,\n              texto: \"PAGO IMPUESTO: \" + concepto.substring(0, 30),\n              aplicaciones: [{\n                funcional: \"920\", \n                economica: \"225\",\n                gfa: null, \n                importe: importe,\n                cuenta: \"6310\"\n              }]\n            }\n          }\n        ]\n      };\n    }"
  },
  {
    "description": "Copy of PIE Ayuntamiento payment pattern",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /Pie Ayunt. Sist. General.*Corporaciones Locales Por P.I.E./i.test(concepto);\n      \n      // Additional conditions could include:\n      // - Date range check\n      const fechaObj = new Date(fecha);\n      const isEndOfMonth = fechaObj.getDate() >= 25; // Example: transactions typically at end of month\n      \n      // - Specific banks or accounts\n      const isBBVA = caja.includes('BBVA');\n      \n      // - Amount ranges\n      //const importeNum = parseFloat(importe.replace(',', '.'));\n      const isLargeAmount = importe > 50000; // Example threshold\n      \n      // Combine conditions as needed \n      return conceptMatch && isEndOfMonth && isBBVA;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const cajaReal = caja.split('_')[0];\n      const fechaFormateada = fecha;\n      \n      \n      // Calculate sub-amounts based on rules\n      const importe1 = Math.round(importe * 0.96 * 100) / 100;\n      const importe2 = Math.round(importe * 0.034 * 100) / 100;\n      const importe3 = Math.round(importe * 0.006 * 100) / 100;\n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        liquido_operaciones: importeNumerico,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"42000\", IMPORTE_PARTIDA: importe1 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `PARTICIPACION TRIBUTOS DEL ESTADO. ${obtenerMes(fecha)}/2024`, \n                ado: \"\" \n              }]\n            }\n          },\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042J\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"130\", IMPORTE_PARTIDA: importe2 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `COMPENSACION INICIAL IAE CONSOLIDADA. PIE ${obtenerMes(fecha)}/2024`, \n                ado: \"\" \n              }]\n            }\n          },\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: cajaReal,\n              tercero: \"S2826042J\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"130\", IMPORTE_PARTIDA: importe3 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `COMPENSACION ADICIONAL IAE CONSOLIDADA. PIE ${obtenerMes(fecha)}/2024`, \n                ado: \"\" \n              }]\n            }\n          },\n          // ADO generic entry\n          {\n            tipo: \"ado220\",\n            detalle: {\n              fecha: fecha,\n              expediente: \"rbt-apunte-ADO\",\n              tercero: \"P9100012E\",\n              fpago: \"10\",\n              tpago: \"10\",\n              caja: cajaReal,\n              texto: \"AUTOMATICO \" + concepto.substring(0, 30),\n              aplicaciones: [{\n                funcional: \"162\", \n                economica: \"467\",\n                gfa: null, \n                importe: importe,\n                cuenta: \"6501\"\n              }]\n            }\n          }\n        ]\n      };\n    }"
  },
  {
    "description": "ARQUEO-PLACA-VADO",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // - Amount ranges\n      //const importeNum = parseFloat(importe.replace(',', '.'));\n      const matchAmount = importe == 14;\n      \n      // Combine conditions as needed \n      return matchAmount;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"43000000M\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"399\", IMPORTE_PARTIDA: importe },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `TRANSF N/F ${concepto} (PLACA VADO)`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "ARQUEO-TRAMITE-CATASTRO",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // - Amount ranges\n      //const importeNum = parseFloat(importe.replace(',', '.'));\n      const matchAmount = importe == 7;\n      \n      // Combine conditions as needed \n      return matchAmount;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const dateISOString = new Date().toISOString();\n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n\t      creation_date: dateISOString,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"43000000M\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"325\", IMPORTE_PARTIDA: importe },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `TRANSF N/F ${concepto} (TRAMITE CATASTRO)`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "ARQUEO-ALQUILER-PISCINA",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // - Amount ranges\n      //const importeNum = parseFloat(importe.replace(',', '.'));\n      const matchAmount = importe == 440;\n      \n      // Combine conditions as needed \n      return matchAmount;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const cajaReal = caja.split('_')[0];\n       function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"43000000M\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"399\", IMPORTE_PARTIDA: importe },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `TRANSF N/F ${concepto} (ALQUILER BAR PISCINA)`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "ARQUEO-C60-CAIXA-204",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /IMPUESTOS/i.test(concepto);\n      \n      // - Specific banks or accounts\n      const isCaixa204 = caja == '204';\n      \n      // Combine conditions as needed \n      return conceptMatch && isCaixa204;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"43000000M\",\n              naturaleza: \"5\",\n              final: [\n                { partida: \"30012\", contraido: \"True\", IMPORTE_PARTIDA: importe },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `RECAUDADO TRIBUTOS VARIOS C60`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "ARQUEO-207-SUBVENCION-GUARDERIA",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /TRANSFERENCIAS 41016796-E.I. CASARICHE/i.test(concepto);\n      \n      // - Specific banks or accounts\n      const isBBVA207 = caja == '207';\n      \n      // Combine conditions as needed \n      return conceptMatch && isBBVA207;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"45575500B\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"45002\", proyecto: \"24000014\", IMPORTE_PARTIDA: importe},\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0}\n              ],\n              texto_sical: [{ \n                tcargo: `TRANSF N/F ${concepto} `, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "ARQUEO-C60-SANTANDER-201",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /Liquidacion Por Traspaso/i.test(concepto);\n      \n      // - Specific banks or accounts\n      const isSantander = caja == '201';\n      \n      // Combine conditions as needed \n      return conceptMatch && isSantander;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"43000000M\",\n              naturaleza: \"5\",\n              final: [\n                { partida: \"30012\", contraido: \"True\", IMPORTE_PARTIDA: importe },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `RECAUDADO TRIBUTOS VARIOS C60`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "ARQUEO-Licencia de Obra",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /obra/i.test(concepto);\n      \n           \n      // Combine conditions as needed \n      return conceptMatch;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      \t   \n      // Calculate sub-amounts based on rules\n      const importe1 = importe - 200;\n      const importe2 = 200;\n      const dateISOString = new Date().toISOString();\n\n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 2,\n\t      creation_date: dateISOString,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"000\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"290\", IMPORTE_PARTIDA: importe1 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `TRANSF. N/F: A/C AUTOLIQUIDACION ICIO POR OBRAS ${concepto}`, \n                ado: \"\" \n              }]\n            }\n          },\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"000\",\n              naturaleza: \"5\",\n              final: [\n                { partida: \"20104\", contraido: \"True\", IMPORTE_PARTIDA: importe2 },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `TRANSF. N/F FIANZA POR OBRAS EN  ${concepto}`, \n                ado: \"\" \n              }]\n            }\n          }\n        ]\n      };\n    }"
  },
  {
    "description": "ARQUEO-BBVA-LIQ-INTERESES",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /LIQUIDACION DE INTERESES/i.test(concepto);\n      \n      // - Specific banks or accounts\n      const isBBVA207 = caja == '207';\n      const isBBVA233 = caja == '233';\n      const isBBVA = (isBBVA207 || isBBVA233)\t\t\n      \n      // Combine conditions as needed \n      return conceptMatch && isBBVA;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const dateISOString = new Date().toISOString();\n       function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n\t      creation_date: dateISOString,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"A48265169\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"521\", IMPORTE_PARTIDA: importe},\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0}\n              ],\n              texto_sical: [{ \n                tcargo: `LIQUIDACION MENSUAL DE INTERESES CUENTA ${caja}`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "ado-COMISIONES-CAJA-RURAL",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /liq.cta./i.test(concepto);\n      const containsTaxKeyword = /liq.cta.|118297050 cobro cuota|118298769 cobro cuota|118361278 cobro cuota/i.test(concepto);\n      // - Specific banks or accounts\n      const isCRURAL203 = caja == '203';\n      const isCRURAL239 = caja == '239';\n      const isCRURAL = (isCRURAL203 || isCRURAL239)\t\t\n      \n      // Combine conditions as needed \n      return containsTaxKeyword && isCRURAL;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const dateISOString = new Date().toISOString();\n      const absImporte = Math.abs(importe);      \n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n        creation_date: dateISOString,\n        liquido_operaciones: importe,\n        operaciones: [\n        {\n          tipo: \"ado220\",\n          detalle: {\n            fecha: fecha,\n            expediente: \"rbt-\" + fecha,\n            tercero: \"F91119065\",\n            fpago: \"10\",\n            tpago: \"10\",\n            caja: caja,\n            texto: \"Liquidacion comisiones : \" +caja + ' ' + concepto.substring(0, 150),\n            aplicaciones: [{\n              funcional: \"932\", \n              economica: \"311\",\n              gfa: null, \n              importe: absImporte,\n              cuenta: \"669\"\n            }]\n          }\n        }\n        ]\n      }   \n};"
  },
  {
    "description": "ado-COMISIONES-SANTANDER",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /Liquidacion del Contra/i.test(concepto);\n      \n      // - Specific banks or accounts\n      const isSANTANDER201 = caja == '201';\n      const isSANTANDERXXX = caja == '00XX999'; //FUTURE USE\n      const isSANTANDER = (isSANTANDER201 || isSANTANDERXXX)\t\t\n      \n      // Combine conditions as needed \n      return conceptMatch && isSANTANDER;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const dateISOString = new Date().toISOString();\n      const absImporte = Math.abs(importe);      \n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n          num_operaciones: 1,\n          creation_date: dateISOString,\n          liquido_operaciones: importe,\n          operaciones: [\n            {\n              tipo: \"ado220\",\n              detalle: {\n                fecha: fecha,\n                expediente: \"Rbt-\" + fecha,\n                tercero: \"A39000013\",\n                fpago: \"10\",\n                tpago: \"10\",\n                caja: caja,\n                texto: \"Liquidacion comisiones : \" +caja + ' ' + concepto.substring(0, 80),\n                aplicaciones: [{\n                  funcional: \"932\", \n                  economica: \"311\",\n                  gfa: null, \n                  importe: absImporte,\n                  cuenta: \"669\"\n                }]\n              }\n            }\n          ]\n      }\n};"
  },
  {
    "description": "ARQUEO-C19-RECIBOS",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /FATIR/i.test(concepto);\n      \n      // - Specific banks or accounts\n      const isCaixa200 = caja == '200';\n      \n      // Combine conditions as needed \n      return conceptMatch && isCaixa200;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"43000000M\",\n              naturaleza: \"5\",\n              final: [\n                { partida: \"30012\", contraido: \"True\", IMPORTE_PARTIDA: importe },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `RECAUDADO TASAS ......`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "LIQ OPAEF-BBVA",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /P4102600F ANTIC.ORD/i.test(concepto);\n      \n      // - Specific banks or accounts\n      const isBBVA207 = caja == '207';\n      const isBBVA233 = caja == '233';\n      const isBBVA = (isBBVA207 || isBBVA233)\t\t\n      \n      // Combine conditions as needed \n      return conceptMatch && isBBVA;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const dateISOString = new Date().toISOString();\n\n\n      function getMesAnyo(fechaDDMMYYYY) {\n       const meses = ['ENERO', 'FEBRERO', 'MARZO', 'ABRIL', 'MAYO', 'JUNIO', 'JULIO', 'AGOSTO',       'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE'];\n       console.log(\"getMes\", fecha);\n       // Parse ddmmYYYY format\n       const day = fechaDDMMYYYY.substring(0, 2);\n       const month = fechaDDMMYYYY.substring(2, 4);\n       const year = fechaDDMMYYYY.substring(4, 8);\n  \n       // JavaScript months are 0-indexed, so subtract 1 from the parsed month\n       const monthIndex = parseInt(month, 10) - 1;\n  \n       return meses[monthIndex]+'/'+year;\n      };\n       function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      const aportacionConsorcio = 7189.06; \n      const anticipoBruto = importe + aportacionConsorcio;\n      \n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n\t      creation_date: dateISOString,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"43000000M\",\n              naturaleza: \"5\",\n              final: [\n                { partida: \"30016\", IMPORTE_PARTIDA: anticipoBruto},\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0}\n              ],\n              texto_sical: [{ \n                tcargo: `OPAEF, A/C RECAUDACION TRIBUTOS VARIOS. ${getMesAnyo(fecha)} `, \n                ado: \"\" \n              }]\n            }\n          },\n          {\n          tipo: \"ado220\",\n          detalle: {\n            fecha: fecha,\n            expediente: \"Rbt-\" + fecha,\n            tercero: \"P9100012E\",\n            fpago: \"10\",\n            tpago: \"10\",\n            caja: caja,\n            texto: `APORTACION PARA GASTOS GENERALES Y ZTS (DTO ANTICIPO OPAEF DE ${getMesAnyo(fecha)})`,\n            aplicaciones: [{\n              funcional: \"162\", \n              economica: \"467\",\n              gfa: null, \n              importe: aportacionConsorcio,\n              cuenta: \"6501\"\n            }]\n          }\n        }\n          \n        ]\n      };\n    }"
  },
  {
    "description": "Copy of ado-COMISIONES-SANTANDER",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /Liquidacion del Contra/i.test(concepto);\n      \n            \n      // Combine conditions as needed \n      return conceptMatch && isSANTANDER;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const dateISOString = new Date().toISOString();\n      const absImporte = Math.abs(importe);      \n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n          num_operaciones: 1,\n          creation_date: dateISOString,\n          liquido_operaciones: importe,\n          operaciones: [\n            {\n              tipo: \"ado220\",\n              detalle: {\n                fecha: fecha,\n                expediente: \"Rbt-\" + fecha,\n                tercero: \"A39000013\",\n                fpago: \"10\",\n                tpago: \"10\",\n                caja: caja,\n                texto: \"Liquidacion comisiones : \" +caja + ' ' + concepto.substring(0, 80),\n                aplicaciones: [{\n                  funcional: \"932\", \n                  economica: \"311\",\n                  gfa: null, \n                  importe: absImporte,\n                  cuenta: \"669\"\n                }]\n              }\n            }\n          ]\n      }\n};"
  },
  {
    "description": "ARQUEO-FRACC-DEUDA-TEXTIL-CASARICHE",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /FATIR/i.test(concepto);\n      \n      // - Specific banks or accounts\n      const isCaixa200 = caja == '200';\n      const matchAmount = importe == 314.30;\n      // Combine conditions as needed \n      return matchAmount && isCaixa200;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"43000000M\",\n              naturaleza: \"5\",\n              final: [\n                { partida: \"30012\", contraido: \"True\", IMPORTE_PARTIDA: importe },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `TRANSF N/F TEXTILES CASARICHE, SL A/C FRACCIONAMIENTO B14799156565847P18D3622024`, \n                ado: \"\" \n              }]\n            }\n          },\n          \n        ]\n      };\n    }"
  },
  {
    "description": "ado-COMISIONES-CAIXABANK",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /liq.cta./i.test(concepto);\n      const containsTaxKeyword = /MANTENIMIENTO |ADMINISTRACIÓN DEP./i.test(concepto);\n      // - Specific banks or accounts\n      const isCAIXA200 = caja == '200';\n      const isCAIXA204 = caja == '204';\n      const isCAIXA = (isCAIXA200 || isCAIXA204)\t\t\n      \n      // Combine conditions as needed \n      return containsTaxKeyword && isCAIXA;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const dateISOString = new Date().toISOString();\n      const absImporte = Math.abs(importe);      \n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n        creation_date: dateISOString,\n        liquido_operaciones: importe,\n        operaciones: [\n        {\n          tipo: \"ado220\",\n          detalle: {\n            fecha: fecha,\n            expediente: \"rbt-\" + fecha,\n            tercero: \"A08663619\",\n            fpago: \"10\",\n            tpago: \"10\",\n            caja: caja,\n            texto: \"Liquidacion comisiones : \" +caja + ' ' + concepto.substring(0, 150),\n            aplicaciones: [{\n              funcional: \"932\", \n              economica: \"311\",\n              gfa: null, \n              importe: absImporte,\n              cuenta: \"669\"\n            }]\n          }\n        }\n        ]\n      }   \n};"
  },
  {
    "description": "PATRICA Ayuntamiento",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /PATRICA/i.test(concepto);\n      \n      \n      // - Specific banks or accounts\n      const isBBVA = caja == '207';\n      \n      // Combine conditions as needed \n      return conceptMatch && isBBVA;\n    }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const cajaReal = caja.split('_')[0];\n      const dateISOString = new Date().toISOString();\n      function getMesAnyo(fechaDDMMYYYY) {\n       const meses = ['ENERO', 'FEBRERO', 'MARZO', 'ABRIL', 'MAYO', 'JUNIO', 'JULIO', 'AGOSTO',       'SEPTIEMBRE', 'OCTUBRE', 'NOVIEMBRE', 'DICIEMBRE'];\n       console.log(\"getMes\", fecha);\n       // Parse ddmmYYYY format\n       const day = fechaDDMMYYYY.substring(0, 2);\n       const month = fechaDDMMYYYY.substring(2, 4);\n       const year = fechaDDMMYYYY.substring(4, 8);\n  \n       // JavaScript months are 0-indexed, so subtract 1 from the parsed month\n       const monthIndex = parseInt(month, 10) - 1;\n  \n       return meses[monthIndex]+'/'+year;\n      };\n      // Calculate sub-amounts based on rules\n      const importe1 = Math.round(importe * 0.96 * 100) / 100;\n      const importe2 = Math.round(importe * 0.034 * 100) / 100;\n      const importe3 = Math.round(importe * 0.006 * 100) / 100;\n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n\t      creation_date: dateISOString,\n        liquido_operaciones: importe,\n        operaciones: [\n          {\n            tipo: \"arqueo\",\n            detalle: {\n              fecha: fecha,\n              caja: caja,\n              tercero: \"45575500B\",\n              naturaleza: \"4\",\n              final: [\n                { partida: \"45000\", IMPORTE_PARTIDA: importe },\n                { partida: \"Total\", IMPORTE_PARTIDA: 0.0 }\n              ],\n              texto_sical: [{ \n                tcargo: `PARTICIPACION TRIBUTOS COMUNIDAD AUTONOMA (PATRICA). ${getMesAnyo(fecha)}`, \n                ado: \"\" \n              }]\n            }\n          } \n        ]\n      };\n    }"
  },
  {
    "description": "ado-COMISIONES-BBVA",
    "matcherFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      \n      // Match by concept pattern\n      const conceptMatch = /liq.cta./i.test(concepto);\n      const containsTaxKeyword = /MANTENIMIENTO |ADMINISTRACIÓN DEP.|COMISIONES SERV/i.test(concepto);\n      // - Specific banks or accounts\n      const isBBVA207 = caja == '207';\n      const isBBVA233 = caja == '233';\n      const isBBVA = (isBBVA207 || isBBVA233)\t\t\n      \n      // Combine conditions as needed \n      return containsTaxKeyword && isBBVA;\n      \n     }",
    "generatorFunction": "(data) => {\n      const [caja, fecha, concepto, importe] = data;\n      const dateISOString = new Date().toISOString();\n      const absImporte = Math.abs(importe);      \n      function removeNonAlphanumeric(str) {\n        return str.replace(/[^a-zA-Z0-9]/g, '');\n      };\n      const startIndex = Math.floor((concepto.length - 5) / 2);\n      const middle6 = removeNonAlphanumeric(concepto).slice(startIndex, startIndex + 6);\n      const normalizedImporte = String(importe).replace(/,/g, '');\n      return {\n\t      id_task: caja+'_'+fecha+'_'+normalizedImporte+'_'+ middle6,\n        num_operaciones: 1,\n        creation_date: dateISOString,\n        liquido_operaciones: importe,\n        operaciones: [\n        {\n          tipo: \"ado220\",\n          detalle: {\n            fecha: fecha,\n            expediente: \"rbt-\" + fecha,\n            tercero: \"A48265169\",\n            fpago: \"10\",\n            tpago: \"10\",\n            caja: caja,\n            texto: \"Liquidacion comisiones : \" +caja + ' ' + concepto.substring(0, 150),\n            aplicaciones: [{\n              funcional: \"932\", \n              economica: \"311\",\n              gfa: null, \n              importe: absImporte,\n              cuenta: \"669\"\n            }]\n          }\n        }\n        ]\n      }   \n};"
  }
]